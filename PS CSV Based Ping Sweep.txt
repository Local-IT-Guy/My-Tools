#This is a PowerShell script designed to loop a basic 'ping' to each IP listed in a .csv file and output the status of the connection into the same or new (same if the date is the same, new if it isn't) .csv file. The resulting .csv can #be screened for status changes. Status 'changes' are determined by the notes. No notes would simply mean the device was previously 'up', and as recommened; applied notes would mean it was previously 'down'. Using this logic, one can #format the .csv into a table with headers and save it as a .xls (Excel) doc to filter for changes or more specific statuses. Any 'blank' notes with an 'up' status, would mean the devices are up as intended. Any 'down' without notes, #would mean it has went down since the last scan. Here you would add notes to identify the downage and/or why it is down. Inversely, any 'up' status with a note will mean that it is back up after having been previously down. Here you #can remove the notes. After screening and updating any notes, you CAN clear the status column to blank cells and remove the header. Save this version as a .csv again in the orginal location and it will serve as the next scan's #database. You do NOT have to remove the headers or clear the status for the scan to work and output the current status. It will only make the print look cleaner while the scan is occuring. Otherwise the output will still be accurate #but will contain an additional header you can simply remove. Saving the Excel version in a different location is a great way to retain a record or to share as a report.
#This code is pending edits to incorporate Excel instead of .csv to avoid the need of format conversion.

   

#Opening script with welcome message.
echo ""
echo ""
$Begin = Read-Host "Hello!

Enter Y to start."

if ($Begin -eq "y"){

#Defining the output results format
$results = @()
$Date = Get-Date -Format "ddMMMyyyy"

echo "Checking the connections to..."

#Ensure access to the shared directory and verify the path name is correct here.
$folderPath = "X:\filelocation" 

#Getting the latest .csv database contents from the previously defined path.
$latestFile = Get-ChildItem -Path $folderPath | Sort-Object LastWriteTime -Descending | Select-Object -First 1
$Objects = Get-Content -Path $latestFile.FullName

#Definitions for the progress bar.
$Count = 0
$TotalToCheck = 0
$listToCheck = @()
foreach ($Object in $Objects){
         $TotalToCheck += 1
         $listToCheck += $Objects
}
#Looping the connection checks through the database.
$results = [System.Collections.Generic.List[PSObject]]::new()

foreach ($Object in $Objects){
    Write-Progress -Id 0 -Activity "Checking connections to DDCs an gateways" -Status "$Count of $TotalToCheck" -PercentComplete (($Count / $TotalToCheck) * 100)
      
	if (Test-Connection  $Object.Split(",")[0] -BufferSize 16 -Count 2 -ea 0 -Quiet){
        $Output = "up"
        Write-host -ForegroundColor Green $Object.Split(",")[0] $Object.Split(",")[1] $Object.Split(",")[2] $Object.Split(",")[3] "up" $Object.Split(",")[4]
            }
	else{
        $Output = "down"
        Write-host -ForegroundColor Red $Object.Split(",")[0] $Object.Split(",")[1] $Object.Split(",")[2] $Object.Split(",")[3] "down" $Object.Split(",")[4]
      }
      $result = [PSCustomObject]@{
        IP            = $Object.Split(",")[0]
        Object        = $Object.Split(",")[1]
        Description   = $Object.Split(",")[2]
        UpDown        = $Output
        Notes         = $Object.Split(",")[4]
      }
      
      $results.Add($result)

$Count++
} 
#Exporting the results to the location indicated. By default this is the same location as the source database.  
$results | Export-Csv -Path "X:\filelocation $($Date).csv" -NoTypeInformation

echo "Scan complete. Report is available in .csv format.

* For ease of visibility, remove the HEADER and clear the STATUS COLUMN before saving the database for next scan.*
    This is NOT a requirement for the script to work.
    
    Now let's do more gooder!"

#The else statement to skip the script.
}else {
    write-host -ForegroundColor Red "Canceled. Restart script to begin again."
}