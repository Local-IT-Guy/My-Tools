#Opening script with welcome message.
echo ""
echo ""
$Begin = Read-Host "Hello!
Ready to begin connection scan?
Enter Y to start."

if ($Begin -eq "y"){

#Defining the output results format
$results = @()
$Date = Get-Date -Format "ddMMMyyyy"

echo "Checking the connections to..."

#Ensure access to the shared directory and verify the path name is correct here.
$folderPath = "X:\filelocation" 

#Getting the latest .csv database contents from the previously defined path.
$latestFile = Get-ChildItem -Path $folderPath | Sort-Object LastWriteTime -Descending | Select-Object -First 1
$Objects = Get-Content -Path $latestFile.FullName

#Definitions for the progress bar.
$Count = 0
$TotalToCheck = 0
$listToCheck = @()
foreach ($Object in $Objects){
         $TotalToCheck += 1
         $listToCheck += $Objects
}
#Looping the connection checks through the database.
$results = [System.Collections.Generic.List[PSObject]]::new()

foreach ($Object in $Objects){
    Write-Progress -Id 0 -Activity "Checking connections." -Status "$Count of $TotalToCheck" -PercentComplete (($Count / $TotalToCheck) * 100)
      
	if (Test-Connection  $Object.Split(",")[0] -BufferSize 16 -Count 2 -ea 0 -Quiet){
        $Output = "up"
        Write-host -ForegroundColor Green $Object.Split(",")[0] $Object.Split(",")[1] $Object.Split(",")[2] $Object.Split(",")[3] "up" $Object.Split(",")[4]
            }
	else{
        $Output = "down"
        Write-host -ForegroundColor Red $Object.Split(",")[0] $Object.Split(",")[1] $Object.Split(",")[2] $Object.Split(",")[3] "down" $Object.Split(",")[4]
      }
      $result = [PSCustomObject]@{
        IP            = $Object.Split(",")[0]
        Object        = $Object.Split(",")[1]
        Description   = $Object.Split(",")[2]
        UpDown        = $Output
        Notes         = $Object.Split(",")[4]
      }
      
      $results.Add($result)

$Count++
} 
#Exporting the results to the location indicated. Use the same location as the source database to use the results for the next scan you perform.  
$results | Export-Csv -Path "X:\filelocation $($Date).csv" -NoTypeInformation

echo "Scan complete. Report is available in .csv format.

* Remove the HEADER and clear the UPDOWN column before saving the database for next scan.*"

#The else statement to skip the script.
}else {
    write-host -ForegroundColor Red "Canceled. Restart script to begin again."
}
Read-Host "Press any key to continue."
